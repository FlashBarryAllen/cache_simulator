// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache_config.proto

#include "cache_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class CacheConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheConfig> _instance;
} _CacheConfig_default_instance_;
static void InitDefaultsscc_info_CacheConfig_cache_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CacheConfig_default_instance_;
    new (ptr) ::CacheConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CacheConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacheConfig_cache_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CacheConfig_cache_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cache_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cache_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cache_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cache_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CacheConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CacheConfig, cache_size_),
  PROTOBUF_FIELD_OFFSET(::CacheConfig, line_size_),
  PROTOBUF_FIELD_OFFSET(::CacheConfig, associativity_),
  PROTOBUF_FIELD_OFFSET(::CacheConfig, miss_penalty_),
  PROTOBUF_FIELD_OFFSET(::CacheConfig, dirty_wb_penalty_),
  PROTOBUF_FIELD_OFFSET(::CacheConfig, replacement_policy_),
  PROTOBUF_FIELD_OFFSET(::CacheConfig, write_policy_),
  PROTOBUF_FIELD_OFFSET(::CacheConfig, write_miss_policy_),
  PROTOBUF_FIELD_OFFSET(::CacheConfig, trace_file_path_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CacheConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CacheConfig_default_instance_),
};

const char descriptor_table_protodef_cache_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022cache_config.proto\"\341\001\n\013CacheConfig\022\022\n\n"
  "cache_size\030\001 \001(\004\022\021\n\tline_size\030\002 \001(\r\022\025\n\ra"
  "ssociativity\030\003 \001(\r\022\024\n\014miss_penalty\030\004 \001(\r"
  "\022\030\n\020dirty_wb_penalty\030\005 \001(\r\022\032\n\022replacemen"
  "t_policy\030\006 \001(\t\022\024\n\014write_policy\030\007 \001(\t\022\031\n\021"
  "write_miss_policy\030\010 \001(\t\022\027\n\017trace_file_pa"
  "th\030\t \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cache_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cache_5fconfig_2eproto_sccs[1] = {
  &scc_info_CacheConfig_cache_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cache_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cache_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_cache_5fconfig_2eproto, "cache_config.proto", 256,
  &descriptor_table_cache_5fconfig_2eproto_once, descriptor_table_cache_5fconfig_2eproto_sccs, descriptor_table_cache_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cache_5fconfig_2eproto::offsets,
  file_level_metadata_cache_5fconfig_2eproto, 1, file_level_enum_descriptors_cache_5fconfig_2eproto, file_level_service_descriptors_cache_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cache_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cache_5fconfig_2eproto)), true);

// ===================================================================

void CacheConfig::InitAsDefaultInstance() {
}
class CacheConfig::_Internal {
 public:
};

CacheConfig::CacheConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CacheConfig)
}
CacheConfig::CacheConfig(const CacheConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  replacement_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_replacement_policy().empty()) {
    replacement_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_replacement_policy(),
      GetArena());
  }
  write_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_write_policy().empty()) {
    write_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_write_policy(),
      GetArena());
  }
  write_miss_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_write_miss_policy().empty()) {
    write_miss_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_write_miss_policy(),
      GetArena());
  }
  trace_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_file_path().empty()) {
    trace_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trace_file_path(),
      GetArena());
  }
  ::memcpy(&cache_size_, &from.cache_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&dirty_wb_penalty_) -
    reinterpret_cast<char*>(&cache_size_)) + sizeof(dirty_wb_penalty_));
  // @@protoc_insertion_point(copy_constructor:CacheConfig)
}

void CacheConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheConfig_cache_5fconfig_2eproto.base);
  replacement_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_miss_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cache_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dirty_wb_penalty_) -
      reinterpret_cast<char*>(&cache_size_)) + sizeof(dirty_wb_penalty_));
}

CacheConfig::~CacheConfig() {
  // @@protoc_insertion_point(destructor:CacheConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  replacement_policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_miss_policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CacheConfig::ArenaDtor(void* object) {
  CacheConfig* _this = reinterpret_cast< CacheConfig* >(object);
  (void)_this;
}
void CacheConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheConfig& CacheConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheConfig_cache_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void CacheConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CacheConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replacement_policy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  write_policy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  write_miss_policy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trace_file_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&cache_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dirty_wb_penalty_) -
      reinterpret_cast<char*>(&cache_size_)) + sizeof(dirty_wb_penalty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 cache_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 line_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          line_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 associativity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          associativity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 miss_penalty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          miss_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dirty_wb_penalty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dirty_wb_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string replacement_policy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_replacement_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CacheConfig.replacement_policy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string write_policy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_write_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CacheConfig.write_policy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string write_miss_policy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_write_miss_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CacheConfig.write_miss_policy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trace_file_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_trace_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CacheConfig.trace_file_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CacheConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cache_size = 1;
  if (this->cache_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cache_size(), target);
  }

  // uint32 line_size = 2;
  if (this->line_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_line_size(), target);
  }

  // uint32 associativity = 3;
  if (this->associativity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_associativity(), target);
  }

  // uint32 miss_penalty = 4;
  if (this->miss_penalty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_miss_penalty(), target);
  }

  // uint32 dirty_wb_penalty = 5;
  if (this->dirty_wb_penalty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dirty_wb_penalty(), target);
  }

  // string replacement_policy = 6;
  if (this->replacement_policy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_replacement_policy().data(), static_cast<int>(this->_internal_replacement_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CacheConfig.replacement_policy");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_replacement_policy(), target);
  }

  // string write_policy = 7;
  if (this->write_policy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_write_policy().data(), static_cast<int>(this->_internal_write_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CacheConfig.write_policy");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_write_policy(), target);
  }

  // string write_miss_policy = 8;
  if (this->write_miss_policy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_write_miss_policy().data(), static_cast<int>(this->_internal_write_miss_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CacheConfig.write_miss_policy");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_write_miss_policy(), target);
  }

  // string trace_file_path = 9;
  if (this->trace_file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_file_path().data(), static_cast<int>(this->_internal_trace_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CacheConfig.trace_file_path");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_trace_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CacheConfig)
  return target;
}

size_t CacheConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CacheConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string replacement_policy = 6;
  if (this->replacement_policy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_replacement_policy());
  }

  // string write_policy = 7;
  if (this->write_policy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_write_policy());
  }

  // string write_miss_policy = 8;
  if (this->write_miss_policy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_write_miss_policy());
  }

  // string trace_file_path = 9;
  if (this->trace_file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_file_path());
  }

  // uint64 cache_size = 1;
  if (this->cache_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cache_size());
  }

  // uint32 line_size = 2;
  if (this->line_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_line_size());
  }

  // uint32 associativity = 3;
  if (this->associativity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_associativity());
  }

  // uint32 miss_penalty = 4;
  if (this->miss_penalty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_miss_penalty());
  }

  // uint32 dirty_wb_penalty = 5;
  if (this->dirty_wb_penalty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dirty_wb_penalty());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CacheConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CacheConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CacheConfig)
    MergeFrom(*source);
  }
}

void CacheConfig::MergeFrom(const CacheConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CacheConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.replacement_policy().size() > 0) {
    _internal_set_replacement_policy(from._internal_replacement_policy());
  }
  if (from.write_policy().size() > 0) {
    _internal_set_write_policy(from._internal_write_policy());
  }
  if (from.write_miss_policy().size() > 0) {
    _internal_set_write_miss_policy(from._internal_write_miss_policy());
  }
  if (from.trace_file_path().size() > 0) {
    _internal_set_trace_file_path(from._internal_trace_file_path());
  }
  if (from.cache_size() != 0) {
    _internal_set_cache_size(from._internal_cache_size());
  }
  if (from.line_size() != 0) {
    _internal_set_line_size(from._internal_line_size());
  }
  if (from.associativity() != 0) {
    _internal_set_associativity(from._internal_associativity());
  }
  if (from.miss_penalty() != 0) {
    _internal_set_miss_penalty(from._internal_miss_penalty());
  }
  if (from.dirty_wb_penalty() != 0) {
    _internal_set_dirty_wb_penalty(from._internal_dirty_wb_penalty());
  }
}

void CacheConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CacheConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheConfig::CopyFrom(const CacheConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CacheConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheConfig::IsInitialized() const {
  return true;
}

void CacheConfig::InternalSwap(CacheConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  replacement_policy_.Swap(&other->replacement_policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  write_policy_.Swap(&other->write_policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  write_miss_policy_.Swap(&other->write_miss_policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trace_file_path_.Swap(&other->trace_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacheConfig, dirty_wb_penalty_)
      + sizeof(CacheConfig::dirty_wb_penalty_)
      - PROTOBUF_FIELD_OFFSET(CacheConfig, cache_size_)>(
          reinterpret_cast<char*>(&cache_size_),
          reinterpret_cast<char*>(&other->cache_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CacheConfig* Arena::CreateMaybeMessage< ::CacheConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CacheConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

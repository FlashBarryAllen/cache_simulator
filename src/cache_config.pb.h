// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cache_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cache_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cache_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cache_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cache_5fconfig_2eproto;
class CacheConfig;
class CacheConfigDefaultTypeInternal;
extern CacheConfigDefaultTypeInternal _CacheConfig_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CacheConfig* Arena::CreateMaybeMessage<::CacheConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CacheConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CacheConfig) */ {
 public:
  inline CacheConfig() : CacheConfig(nullptr) {};
  virtual ~CacheConfig();

  CacheConfig(const CacheConfig& from);
  CacheConfig(CacheConfig&& from) noexcept
    : CacheConfig() {
    *this = ::std::move(from);
  }

  inline CacheConfig& operator=(const CacheConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheConfig& operator=(CacheConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheConfig* internal_default_instance() {
    return reinterpret_cast<const CacheConfig*>(
               &_CacheConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CacheConfig& a, CacheConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheConfig* New() const final {
    return CreateMaybeMessage<CacheConfig>(nullptr);
  }

  CacheConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheConfig& from);
  void MergeFrom(const CacheConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CacheConfig";
  }
  protected:
  explicit CacheConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cache_5fconfig_2eproto);
    return ::descriptor_table_cache_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplacementPolicyFieldNumber = 6,
    kWritePolicyFieldNumber = 7,
    kWriteMissPolicyFieldNumber = 8,
    kTraceFilePathFieldNumber = 9,
    kCacheSizeFieldNumber = 1,
    kLineSizeFieldNumber = 2,
    kAssociativityFieldNumber = 3,
    kMissPenaltyFieldNumber = 4,
    kDirtyWbPenaltyFieldNumber = 5,
  };
  // string replacement_policy = 6;
  void clear_replacement_policy();
  const std::string& replacement_policy() const;
  void set_replacement_policy(const std::string& value);
  void set_replacement_policy(std::string&& value);
  void set_replacement_policy(const char* value);
  void set_replacement_policy(const char* value, size_t size);
  std::string* mutable_replacement_policy();
  std::string* release_replacement_policy();
  void set_allocated_replacement_policy(std::string* replacement_policy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_replacement_policy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_replacement_policy(
      std::string* replacement_policy);
  private:
  const std::string& _internal_replacement_policy() const;
  void _internal_set_replacement_policy(const std::string& value);
  std::string* _internal_mutable_replacement_policy();
  public:

  // string write_policy = 7;
  void clear_write_policy();
  const std::string& write_policy() const;
  void set_write_policy(const std::string& value);
  void set_write_policy(std::string&& value);
  void set_write_policy(const char* value);
  void set_write_policy(const char* value, size_t size);
  std::string* mutable_write_policy();
  std::string* release_write_policy();
  void set_allocated_write_policy(std::string* write_policy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_write_policy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_write_policy(
      std::string* write_policy);
  private:
  const std::string& _internal_write_policy() const;
  void _internal_set_write_policy(const std::string& value);
  std::string* _internal_mutable_write_policy();
  public:

  // string write_miss_policy = 8;
  void clear_write_miss_policy();
  const std::string& write_miss_policy() const;
  void set_write_miss_policy(const std::string& value);
  void set_write_miss_policy(std::string&& value);
  void set_write_miss_policy(const char* value);
  void set_write_miss_policy(const char* value, size_t size);
  std::string* mutable_write_miss_policy();
  std::string* release_write_miss_policy();
  void set_allocated_write_miss_policy(std::string* write_miss_policy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_write_miss_policy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_write_miss_policy(
      std::string* write_miss_policy);
  private:
  const std::string& _internal_write_miss_policy() const;
  void _internal_set_write_miss_policy(const std::string& value);
  std::string* _internal_mutable_write_miss_policy();
  public:

  // string trace_file_path = 9;
  void clear_trace_file_path();
  const std::string& trace_file_path() const;
  void set_trace_file_path(const std::string& value);
  void set_trace_file_path(std::string&& value);
  void set_trace_file_path(const char* value);
  void set_trace_file_path(const char* value, size_t size);
  std::string* mutable_trace_file_path();
  std::string* release_trace_file_path();
  void set_allocated_trace_file_path(std::string* trace_file_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trace_file_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trace_file_path(
      std::string* trace_file_path);
  private:
  const std::string& _internal_trace_file_path() const;
  void _internal_set_trace_file_path(const std::string& value);
  std::string* _internal_mutable_trace_file_path();
  public:

  // uint64 cache_size = 1;
  void clear_cache_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 cache_size() const;
  void set_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cache_size() const;
  void _internal_set_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 line_size = 2;
  void clear_line_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 line_size() const;
  void set_line_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_line_size() const;
  void _internal_set_line_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 associativity = 3;
  void clear_associativity();
  ::PROTOBUF_NAMESPACE_ID::uint32 associativity() const;
  void set_associativity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_associativity() const;
  void _internal_set_associativity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 miss_penalty = 4;
  void clear_miss_penalty();
  ::PROTOBUF_NAMESPACE_ID::uint32 miss_penalty() const;
  void set_miss_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_miss_penalty() const;
  void _internal_set_miss_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dirty_wb_penalty = 5;
  void clear_dirty_wb_penalty();
  ::PROTOBUF_NAMESPACE_ID::uint32 dirty_wb_penalty() const;
  void set_dirty_wb_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dirty_wb_penalty() const;
  void _internal_set_dirty_wb_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CacheConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replacement_policy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_policy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_miss_policy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_file_path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cache_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 line_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 associativity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 miss_penalty_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dirty_wb_penalty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cache_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CacheConfig

// uint64 cache_size = 1;
inline void CacheConfig::clear_cache_size() {
  cache_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CacheConfig::_internal_cache_size() const {
  return cache_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CacheConfig::cache_size() const {
  // @@protoc_insertion_point(field_get:CacheConfig.cache_size)
  return _internal_cache_size();
}
inline void CacheConfig::_internal_set_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cache_size_ = value;
}
inline void CacheConfig::set_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cache_size(value);
  // @@protoc_insertion_point(field_set:CacheConfig.cache_size)
}

// uint32 line_size = 2;
inline void CacheConfig::clear_line_size() {
  line_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheConfig::_internal_line_size() const {
  return line_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheConfig::line_size() const {
  // @@protoc_insertion_point(field_get:CacheConfig.line_size)
  return _internal_line_size();
}
inline void CacheConfig::_internal_set_line_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  line_size_ = value;
}
inline void CacheConfig::set_line_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_line_size(value);
  // @@protoc_insertion_point(field_set:CacheConfig.line_size)
}

// uint32 associativity = 3;
inline void CacheConfig::clear_associativity() {
  associativity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheConfig::_internal_associativity() const {
  return associativity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheConfig::associativity() const {
  // @@protoc_insertion_point(field_get:CacheConfig.associativity)
  return _internal_associativity();
}
inline void CacheConfig::_internal_set_associativity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  associativity_ = value;
}
inline void CacheConfig::set_associativity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_associativity(value);
  // @@protoc_insertion_point(field_set:CacheConfig.associativity)
}

// uint32 miss_penalty = 4;
inline void CacheConfig::clear_miss_penalty() {
  miss_penalty_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheConfig::_internal_miss_penalty() const {
  return miss_penalty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheConfig::miss_penalty() const {
  // @@protoc_insertion_point(field_get:CacheConfig.miss_penalty)
  return _internal_miss_penalty();
}
inline void CacheConfig::_internal_set_miss_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  miss_penalty_ = value;
}
inline void CacheConfig::set_miss_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_miss_penalty(value);
  // @@protoc_insertion_point(field_set:CacheConfig.miss_penalty)
}

// uint32 dirty_wb_penalty = 5;
inline void CacheConfig::clear_dirty_wb_penalty() {
  dirty_wb_penalty_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheConfig::_internal_dirty_wb_penalty() const {
  return dirty_wb_penalty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheConfig::dirty_wb_penalty() const {
  // @@protoc_insertion_point(field_get:CacheConfig.dirty_wb_penalty)
  return _internal_dirty_wb_penalty();
}
inline void CacheConfig::_internal_set_dirty_wb_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dirty_wb_penalty_ = value;
}
inline void CacheConfig::set_dirty_wb_penalty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dirty_wb_penalty(value);
  // @@protoc_insertion_point(field_set:CacheConfig.dirty_wb_penalty)
}

// string replacement_policy = 6;
inline void CacheConfig::clear_replacement_policy() {
  replacement_policy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheConfig::replacement_policy() const {
  // @@protoc_insertion_point(field_get:CacheConfig.replacement_policy)
  return _internal_replacement_policy();
}
inline void CacheConfig::set_replacement_policy(const std::string& value) {
  _internal_set_replacement_policy(value);
  // @@protoc_insertion_point(field_set:CacheConfig.replacement_policy)
}
inline std::string* CacheConfig::mutable_replacement_policy() {
  // @@protoc_insertion_point(field_mutable:CacheConfig.replacement_policy)
  return _internal_mutable_replacement_policy();
}
inline const std::string& CacheConfig::_internal_replacement_policy() const {
  return replacement_policy_.Get();
}
inline void CacheConfig::_internal_set_replacement_policy(const std::string& value) {
  
  replacement_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheConfig::set_replacement_policy(std::string&& value) {
  
  replacement_policy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CacheConfig.replacement_policy)
}
inline void CacheConfig::set_replacement_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  replacement_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CacheConfig.replacement_policy)
}
inline void CacheConfig::set_replacement_policy(const char* value,
    size_t size) {
  
  replacement_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CacheConfig.replacement_policy)
}
inline std::string* CacheConfig::_internal_mutable_replacement_policy() {
  
  return replacement_policy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheConfig::release_replacement_policy() {
  // @@protoc_insertion_point(field_release:CacheConfig.replacement_policy)
  return replacement_policy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheConfig::set_allocated_replacement_policy(std::string* replacement_policy) {
  if (replacement_policy != nullptr) {
    
  } else {
    
  }
  replacement_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replacement_policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CacheConfig.replacement_policy)
}
inline std::string* CacheConfig::unsafe_arena_release_replacement_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CacheConfig.replacement_policy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return replacement_policy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheConfig::unsafe_arena_set_allocated_replacement_policy(
    std::string* replacement_policy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (replacement_policy != nullptr) {
    
  } else {
    
  }
  replacement_policy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      replacement_policy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CacheConfig.replacement_policy)
}

// string write_policy = 7;
inline void CacheConfig::clear_write_policy() {
  write_policy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheConfig::write_policy() const {
  // @@protoc_insertion_point(field_get:CacheConfig.write_policy)
  return _internal_write_policy();
}
inline void CacheConfig::set_write_policy(const std::string& value) {
  _internal_set_write_policy(value);
  // @@protoc_insertion_point(field_set:CacheConfig.write_policy)
}
inline std::string* CacheConfig::mutable_write_policy() {
  // @@protoc_insertion_point(field_mutable:CacheConfig.write_policy)
  return _internal_mutable_write_policy();
}
inline const std::string& CacheConfig::_internal_write_policy() const {
  return write_policy_.Get();
}
inline void CacheConfig::_internal_set_write_policy(const std::string& value) {
  
  write_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheConfig::set_write_policy(std::string&& value) {
  
  write_policy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CacheConfig.write_policy)
}
inline void CacheConfig::set_write_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  write_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CacheConfig.write_policy)
}
inline void CacheConfig::set_write_policy(const char* value,
    size_t size) {
  
  write_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CacheConfig.write_policy)
}
inline std::string* CacheConfig::_internal_mutable_write_policy() {
  
  return write_policy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheConfig::release_write_policy() {
  // @@protoc_insertion_point(field_release:CacheConfig.write_policy)
  return write_policy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheConfig::set_allocated_write_policy(std::string* write_policy) {
  if (write_policy != nullptr) {
    
  } else {
    
  }
  write_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), write_policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CacheConfig.write_policy)
}
inline std::string* CacheConfig::unsafe_arena_release_write_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CacheConfig.write_policy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return write_policy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheConfig::unsafe_arena_set_allocated_write_policy(
    std::string* write_policy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (write_policy != nullptr) {
    
  } else {
    
  }
  write_policy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      write_policy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CacheConfig.write_policy)
}

// string write_miss_policy = 8;
inline void CacheConfig::clear_write_miss_policy() {
  write_miss_policy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheConfig::write_miss_policy() const {
  // @@protoc_insertion_point(field_get:CacheConfig.write_miss_policy)
  return _internal_write_miss_policy();
}
inline void CacheConfig::set_write_miss_policy(const std::string& value) {
  _internal_set_write_miss_policy(value);
  // @@protoc_insertion_point(field_set:CacheConfig.write_miss_policy)
}
inline std::string* CacheConfig::mutable_write_miss_policy() {
  // @@protoc_insertion_point(field_mutable:CacheConfig.write_miss_policy)
  return _internal_mutable_write_miss_policy();
}
inline const std::string& CacheConfig::_internal_write_miss_policy() const {
  return write_miss_policy_.Get();
}
inline void CacheConfig::_internal_set_write_miss_policy(const std::string& value) {
  
  write_miss_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheConfig::set_write_miss_policy(std::string&& value) {
  
  write_miss_policy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CacheConfig.write_miss_policy)
}
inline void CacheConfig::set_write_miss_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  write_miss_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CacheConfig.write_miss_policy)
}
inline void CacheConfig::set_write_miss_policy(const char* value,
    size_t size) {
  
  write_miss_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CacheConfig.write_miss_policy)
}
inline std::string* CacheConfig::_internal_mutable_write_miss_policy() {
  
  return write_miss_policy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheConfig::release_write_miss_policy() {
  // @@protoc_insertion_point(field_release:CacheConfig.write_miss_policy)
  return write_miss_policy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheConfig::set_allocated_write_miss_policy(std::string* write_miss_policy) {
  if (write_miss_policy != nullptr) {
    
  } else {
    
  }
  write_miss_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), write_miss_policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CacheConfig.write_miss_policy)
}
inline std::string* CacheConfig::unsafe_arena_release_write_miss_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CacheConfig.write_miss_policy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return write_miss_policy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheConfig::unsafe_arena_set_allocated_write_miss_policy(
    std::string* write_miss_policy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (write_miss_policy != nullptr) {
    
  } else {
    
  }
  write_miss_policy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      write_miss_policy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CacheConfig.write_miss_policy)
}

// string trace_file_path = 9;
inline void CacheConfig::clear_trace_file_path() {
  trace_file_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheConfig::trace_file_path() const {
  // @@protoc_insertion_point(field_get:CacheConfig.trace_file_path)
  return _internal_trace_file_path();
}
inline void CacheConfig::set_trace_file_path(const std::string& value) {
  _internal_set_trace_file_path(value);
  // @@protoc_insertion_point(field_set:CacheConfig.trace_file_path)
}
inline std::string* CacheConfig::mutable_trace_file_path() {
  // @@protoc_insertion_point(field_mutable:CacheConfig.trace_file_path)
  return _internal_mutable_trace_file_path();
}
inline const std::string& CacheConfig::_internal_trace_file_path() const {
  return trace_file_path_.Get();
}
inline void CacheConfig::_internal_set_trace_file_path(const std::string& value) {
  
  trace_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheConfig::set_trace_file_path(std::string&& value) {
  
  trace_file_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CacheConfig.trace_file_path)
}
inline void CacheConfig::set_trace_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CacheConfig.trace_file_path)
}
inline void CacheConfig::set_trace_file_path(const char* value,
    size_t size) {
  
  trace_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CacheConfig.trace_file_path)
}
inline std::string* CacheConfig::_internal_mutable_trace_file_path() {
  
  return trace_file_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheConfig::release_trace_file_path() {
  // @@protoc_insertion_point(field_release:CacheConfig.trace_file_path)
  return trace_file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheConfig::set_allocated_trace_file_path(std::string* trace_file_path) {
  if (trace_file_path != nullptr) {
    
  } else {
    
  }
  trace_file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CacheConfig.trace_file_path)
}
inline std::string* CacheConfig::unsafe_arena_release_trace_file_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CacheConfig.trace_file_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return trace_file_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheConfig::unsafe_arena_set_allocated_trace_file_path(
    std::string* trace_file_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trace_file_path != nullptr) {
    
  } else {
    
  }
  trace_file_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trace_file_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CacheConfig.trace_file_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cache_5fconfig_2eproto
